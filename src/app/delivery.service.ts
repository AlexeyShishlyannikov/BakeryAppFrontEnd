import { Injectable } from '@angular/core';
import { Http } from '@angular/http';
import { UserService } from './user.service';
import { AuthService } from './auth.service';
import { async } from '@angular/core/testing';

@Injectable()
export class DeliveryService {
  // tslint:disable-next-line:max-line-length
  array30: number[] = [60660, 60626, 60640, 60659, 60645, 60625, 60613, 60202, 60657, 60618, 60204, 60712, 60208, 60076, 60203, 60614, 60646, 60201, 60630, 60647, 60641, 60077, 60622, 60642, 60610, 60639, 60091, 60611, 60043, 60651, 60654, 60674, 60053, 60661, 60606, 60601, 60612, 60602, 60029, 60603, 60714, 60706, 60607, 60631, 60634, 60604, 60624, 60656, 60689, 60707, 60701, 60644, 60605, 60302, 60068, 60093, 60303, 60664, 60668, 60669, 60670, 60673, 60675, 60677, 60678, 60680, 60681, 60684, 60685, 60686, 60687, 60688, 60690, 60691, 60693, 60694, 60696, 60697, 60699, 60695, 60608, 60301, 60171, 60025, 60616, 60623, 60304, 60305, 60176, 60082, 60022, 60026, 60804, 60019, 60130, 60017, 60161, 60682, 60160, 60153, 60131, 60018, 60653, 60609, 60016, 60666, 60165, 60141, 60632, 60065, 60062, 60164, 60402, 60104, 60615, 60155, 60546, 60056, 60105, 60399, 60163, 60106, 60534, 60513, 60636, 60621, 60162, 60637, 60154, 60638, 60629, 60526, 60070, 60035, 60009, 60126, 60090, 60191, 60649, 60040, 60037, 60501, 60499, 60015, 60007, 60005, 60652, 60620, 60619, 60006, 60558, 60525, 60181, 60459, 60143, 60523, 60456, 60004, 60101, 60805, 60521, 60458, 60455, 60069, 60522, 60454, 60089, 60008, 60599, 60148, 60173, 60453, 60157, 60457, 60045, 60514, 60617, 60655, 60415, 60038, 60055, 60078, 60094, 60559, 60643, 60628, 60196, 60095, 60117, 60179, 60139, 60159, 60168, 60480, 60465, 60074, 60482, 60193, 60067, 60527, 60137, 60138, 60172, 60108, 60803, 60515, 60199, 60061, 60195, 60194, 60044, 60827, 60406, 46394, 60633, 60169, 60418, 60561, 60088, 60463, 60472, 60189, 60188, 60464, 60516, 60047, 60133, 60197, 60116, 60128, 60132, 60445, 60086, 60048, 60469, 46320, 60064, 60187, 60419, 46327, 60532, 46312, 60426, 60192, 60517, 62765, 60011, 60107, 60190, 60409, 60428, 60439, 60085, 60452, 60060, 60473, 60462, 60079, 60010, 60103, 60566, 60567, 60540, 60186, 60185, 60563, 60467, 60429, 60120, 60440, 60565, 46324, 46325, 60476, 60438, 46323, 60477, 60478, 46406, 60555, 60430, 60031, 60184, 60487, 60087, 60569, 46402, 60084, 60030];
  // tslint:disable-next-line:max-line-length
  array20: number[] = [60660, 60626, 60640, 60659, 60645, 60625, 60613, 60202, 60657, 60618, 60204, 60712, 60208, 60076, 60203, 60614, 60646, 60201, 60630, 60647, 60641, 60077, 60622, 60642, 60610, 60639, 60091, 60611, 60043, 60651, 60654, 60674, 60053, 60661, 60606, 60601, 60612, 60602, 60029, 60603, 60714, 60706, 60607, 60631, 60634, 60604, 60624, 60656, 60689, 60707, 60701, 60644, 60605, 60302, 60068, 60093, 60303, 60664, 60668, 60669, 60670, 60673, 60675, 60677, 60678, 60680, 60681, 60684, 60685, 60686, 60687, 60688, 60690, 60691, 60693, 60694, 60696, 60697, 60699, 60695, 60608, 60301, 60171, 60025, 60616, 60623, 60304, 60305, 60176, 60082, 60022, 60026, 60804, 60019, 60130, 60017, 60161, 60682, 60160, 60153, 60131, 60018, 60653, 60609, 60016, 60666, 60165, 60141, 60632, 60065, 60062, 60164, 60402, 60104, 60615, 60155, 60546, 60056, 60105, 60399, 60163, 60106, 60534, 60513, 60636, 60621, 60162, 60637, 60154, 60638, 60629, 60526, 60070, 60035, 60009, 60126, 60090, 60191, 60649, 60040, 60037, 60501, 60499, 60015, 60007, 60005, 60652, 60620, 60619, 60006, 60558, 60525, 60181, 60459, 60143, 60523, 60456, 60004, 60101, 60805, 60521, 60458, 60455, 60069, 60522, 60454, 60089, 60008, 60599, 60148, 60173];
  // tslint:disable-next-line:max-line-length
  array10: number[] = [60660, 60626, 60640, 60659, 60645, 60625, 60613, 60202, 60657, 60618, 60204, 60712, 60208, 60076, 60203, 60614, 60646, 60201, 60630, 60647, 60641, 60077, 60622, 60642, 60610, 60639, 60091, 60611, 60043, 60651, 60654, 60674, 60053, 60661, 60606, 60601, 60612, 60602, 60029, 60603, 60714, 60706, 60607, 60631, 60634, 60604, 60624, 60656, 60689, 60707, 60701, 60644, 60605, 60302, 60068, 60093, 60303, 60690, 60685, 60688, 60687, 60686, 60691, 60693, 60694, 60696, 60697, 60699, 60684, 60680, 60681, 60668, 60669, 60670, 60673, 60675, 60677, 60678, 60664, 60695, 60608, 60301];
  constructor(
    private http: Http,
    private  userService: UserService,
    private authService: AuthService
  ) { }

  public calcPrice(zip: number) {
    if (zip / 10000 < 1 || zip / 100000 >= 1) {
      return null;
    }
    if (this.array10.indexOf(zip) > -1) {
      return 0;
    }
    if (this.array20.indexOf(zip) > -1) {
      return 10;
    }
    if (this.array30.indexOf(zip) > -1) {
      return 20;
    }
    return 1000;
  }
}
